openapi: 3.0.3
info:
  title: CRADA API
  contact:
    name: CRADA staff team
    url: "https://www.crada.ga/api"
    email: "contact@crada.ga"
  description: |-
    <a target="_blank" href="https://god.postman.co/run-collection/13642074-7fad3869-3032-45b7-bc83-e8213302b87e?action=collection%2Ffork&collection-url=entityId%3D13642074-7fad3869-3032-45b7-bc83-e8213302b87e%26entityType%3Dcollection">
         <img alt="Qries" src="https://run.pstmn.io/button.svg" alt="run in Postman"
         width=150" height="70">
      </a>
    # Introduction

    CRADA is an initiative for common people to provide them with various
    essential resources information in their city. A website through which people
    searching for vaccine, medication, vacant beds in hospitals, food facilities,
    plasma and blood donor etc. will be provided here.

    To make developers job easier we are providing the API for the same.


    # Authentication

    The API uses Token System which is available when you login and goto profile panel

    | Security Scheme Type      | HTTP        |
    | ------------------------- | ----------- |
    | HTTP Authorization Scheme | bearer      |

    # Rate limit

    The API enforces rate-limits to protect our servers against malicious and/or mistaken use.

    As of now global limit of 60 requests per minute per IP address is in effect.
  version: '1.0'
servers:
- url: https://www.crada.ga/api/v1
paths:
  /ping:
    get:
      tags:
      - General
      summary: Ping
      description: Simple Ping command to check whether API is alive or not
      operationId: ping
      parameters:
        - in: header
          name: Accept
          schema:
            type: string
            enum:
            - application/json
          required: true
      responses:
        '200':
          description: Ok
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/Ping'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /login:
    post:
      tags:
      - General
      summary: Login
      description: Using this endpoint you can get the auth token so you can use may other endpoints where you need to Authorization.
      operationId: auth/login
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      - name: email
        in: path
        description: Email id of the user
        required: true
        type: string
      - name: password
        in: path
        description: Super Secret password of the user
        required: true
        type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/login'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /register:
    post:
      tags:
      - General
      summary: Register
      description: Using this endpoint you can get the auth token by creating an account so you can use may other endpoints where you need to Authorization.
      operationId: auth/register
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      - name: name
        in: path
        description: name of the user
        required: true
        type: string
      - name: email
        in: path
        description: Email id of the user
        required: true
        type: string
      - name: password
        in: path
        description: Super Secret password of the user
        required: true
        type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/register'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /logout:
    post:
      tags:
      - General
      summary: logout
      description: Using this endpoint you can delete the token so that you can regenerate later when you login again.
      operationId: auth/logout
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      - name: name
        in: path
        description: name of the user
        required: true
        type: string
      - name: email
        in: path
        description: Email id of the user
        required: true
        type: string
      - name: password
        in: path
        description: Super Secret password of the user
        required: true
        type: string
      responses:
        '200':
          description: Ok
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/register'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false


  /country:
    get:
      tags:
      - World Info
      summary: country
      description: In this endpoint you will be able to fetch the country data without any relation to the States data
      operationId: country
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      - name: search
        in: path
        required: false
        style: simple
        Schema:
          type: string
          example: India
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/Country'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /state:
    get:
      tags:
      - World Info
      summary: State
      description: In this endpoint you will be able to fetch the State data without any relation to the Country or Cities data
      operationId: State
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/State'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /city:
    get:
      tags:
      - World Info
      summary: City
      description: In this endpoint you will be able to fetch the City or multiple Cities without any relation to the States or country data
      operationId: City
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/City'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /category:
    get:
      tags:
      - Categories
      summary: category
      description: In this endpoint you will be able to fetch the Category id and names and images of the categories with relationship to sub category endpoint.
      operationId: category
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/category'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /sub-category:
    get:
      tags:
      - Categories
      summary: sub-category
      description: In this endpoint you will be able to fetch the Sub Category id and names with the relation to the categories data.
      operationId: sub-category
      parameters:
      - name: search
        in: query
        description: >-
          {Optional}


          Search by ID , Name OR Category ID
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/sub-category'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json

      deprecated: false
  /resource:
    get:
      tags:
      - Resources
      summary: resource
      operationId: resource
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/resource'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json
      deprecated: false
  /create-resource:
    post:
      tags:
      - New requests
      summary: Create new resource
      operationId: request/new/resource
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/resource'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json
      deprecated: false
  /create-category:
    post:
      tags:
      - New requests
      summary: Create new category
      operationId: request/new/category
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/category'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json
      deprecated: false
  /create-sub-category:
    post:
      tags:
      - New requests
      summary: Create new sub-category
      operationId: request/new/sub-category
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/sub-category'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json
      deprecated: false
  /create-country:
    post:
      tags:
      - New requests
      summary: Create new country
      operationId: request/new/country
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/Country'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json
      deprecated: false
  /create-state:
    post:
      tags:
      - New requests
      summary: Create new state
      operationId: request/new/state
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/State'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json
      deprecated: false
  /create-city:
    post:
      tags:
      - New requests
      summary: Create new city
      operationId: request/new/city
      parameters:
      - name: Accept
        in: header
        required: true
        style: simple
        schema:
          type: string
          enum:
          - application/json
      responses:
        '200':
          description: ''
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/City'
          headers:
            Accept: application/json

        '400':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-400'
          headers:
            Accept: application/json
        '500':
          description:
          content:
            application/json:
               schema:
                $ref: '#/components/schemas/error-500'
          headers:
            Accept: application/json
      deprecated: false

tags:
- name: General
  description: Some general API endpoints which are for tracking or keeping the API alive
- name: World Info
  description: Here you will be able to search the data of Country , State or City where you can get id of the same and fetch further info to filter other data. If you have admin role then use the API token in your profile to manipulate the data of the same
- name: Categories
- name: Resources
  description: >-
    Here you will be able to fetch the data which is saved in DB or in cache.The resource data is auto updated every 10 min using scrappers.


    In order to update data using API you need to have access to API token which can be found in profile page same goes for adding new data using API.
- name: New requests
  description: >-
    Here you will be able to send a request to our server to add a new resource where our bot will check if required indo is available and satsifying.

    Here all the API requests needs Authorization Token
- name: models
  x-displayName: Models
  description: |-
    ## Login
    <SchemaDefinition schemaRef="#/components/schemas/login" />

    ## Register
    <SchemaDefinition schemaRef="#/components/schemas/register" />

    ## Country
    <SchemaDefinition schemaRef="#/components/schemas/Country" />

    ## State
    <SchemaDefinition schemaRef="#/components/schemas/State" />

    ## City
    <SchemaDefinition schemaRef="#/components/schemas/City" />

    ## Category
    <SchemaDefinition schemaRef="#/components/schemas/category" />

    ## Sub Category
    <SchemaDefinition schemaRef="#/components/schemas/sub-category" />

    ## Resources
    <SchemaDefinition schemaRef="#/components/schemas/resource" />

components:
  schemas:
    Ping:
      description: ''
      type: object
      title: Ping
      properties:
        status:
          type: string
        status_code:
          type: integer
        deprecated:
          type: boolean
          enum:
          - false
        data:
          type: object
          properties:
            response:
              type: string
              enum:
              - Pong
    Country:
      description:
      type: object
      title: country
      properties:
        status:
          type: string
        status_code:
          type: integer
        deprecated:
          type: boolean
          enum:
          - false
        meta:
          type: object
          properties:
            current_page:
              type: integer
            data:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                capital:
                  type: string
                code:
                  type: string
                phone_code:
                  type: string
                region:
                  type: string
                subregion:
                  type: string
                created_at:
                  type: string
                updated_at:
                  type: string
                deleted_at:
                  type: string
        first_page_url:
          type: string
        from:
          type: integer
        last_page:
          type: integer
        last_page_url:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        next_page_url:
          type: string
        path:
          type: string
        per_page:
          type: integer
        prev_page_url:
          type: string
        to:
          type: integer
        total:
          type: integer
    Links:
      type: object
      properties:
        url:
          type: string
        label:
          type: string
        active:
          type: boolean
    State:
      description:
      type: object
      title: state
      properties:
        status:
          type: string
        status_code:
          type: integer
        deprecated:
          type: boolean
          enum:
          - false
        meta:
          type: object
          properties:
            current_page:
              type: integer
            data:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                country_code:
                  type: string
                state_code:
                  type: string
                latitude:
                  type: string
                longitude:
                  type: string
                created_at:
                  type: string
                updated_at:
                  type: string
                deleted_at:
                  type: string
        first_page_url:
          type: string
        from:
          type: integer
        last_page:
          type: integer
        last_page_url:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        next_page_url:
          type: string
        path:
          type: string
        per_page:
          type: integer
        prev_page_url:
          type: string
        to:
          type: integer
        total:
          type: integer
    City:
      description:
      type: object
      title: city
      properties:
        status:
          type: string
        status_code:
          type: integer
        deprecated:
          type: boolean
          enum:
          - false
        meta:
          type: object
          properties:
            current_page:
              type: integer
            data:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                latitude:
                  type: string
                longitude:
                  type: string
                created_at:
                  type: string
                updated_at:
                  type: string
                deleted_at:
                  type: string
        first_page_url:
          type: string
        from:
          type: integer
        last_page:
          type: integer
        last_page_url:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        next_page_url:
          type: string
        path:
          type: string
        per_page:
          type: integer
        prev_page_url:
          type: string
        to:
          type: integer
        total:
          type: integer
    category:
      description:
      type: object
      title: category
      properties:
        status:
          type: string
        status_code:
          type: integer
        deprecated:
          type: boolean
          enum:
          - false
        meta:
          type: object
          properties:
            current_page:
              type: integer
            data:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                slug:
                  type: string
                created_at:
                  type: string
                updated_at:
                  type: string
                deleted_at:
                  type: string
                subcatogary:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    category_id:
                      type: integer
        first_page_url:
          type: string
        from:
          type: integer
        last_page:
          type: integer
        last_page_url:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        next_page_url:
          type: string
        path:
          type: string
        per_page:
          type: integer
        prev_page_url:
          type: string
        to:
          type: integer
        total:
          type: integer
    sub-category:
      description:
      type: object
      title: sub-category
      properties:
        status:
          type: string
        status_code:
          type: integer
        deprecated:
          type: boolean
          enum:
          - false
        meta:
          type: object
          properties:
            current_page:
              type: integer
            data:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                extra:
                  type: string
                created_at:
                  type: string
                updated_at:
                  type: string
                category_id:
                  type: integer
                category:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
        first_page_url:
          type: string
        from:
          type: integer
        last_page:
          type: integer
        last_page_url:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        next_page_url:
          type: string
        path:
          type: string
        per_page:
          type: integer
        prev_page_url:
          type: string
        to:
          type: integer
        total:
          type: integer
    resource:
      description:
      type: object
      title: resource
      properties:
        status:
          type: string
        status_code:
          type: integer
        deprecated:
          type: boolean
          enum:
          - false
        meta:
          type: object
          properties:
            current_page:
              type: integer
            data:
              type: object
              properties:
                id:
                  type: integer
                name:
                  type: string
                phone_no:
                  type: string
                email:
                  type: string
                address:
                  type: string
                details:
                  type: string
                note:
                  type: string
                up_vote:
                  type: integer
                down_vote:
                  type: integer
                url:
                  type: string
                created_at:
                  type: string
                updated_at:
                  type: string
                deleted_at:
                  type: string
                city_id:
                  type: integer
                country_id:
                  type: integer
                state_id:
                  type: integer
                category:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    slug:
                      type: string
                    pivot:
                      type: object
                      properties:
                        resource_id:
                          type: integer
                        category_id:
                          type: integer
                city:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                state:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    state_code:
                      type: string
                country:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    code:
                      type: string
        first_page_url:
          type: string
        from:
          type: integer
        last_page:
          type: integer
        last_page_url:
          type: string
        links:
          $ref: '#/components/schemas/Links'
        next_page_url:
          type: string
        path:
          type: string
        per_page:
          type: integer
        prev_page_url:
          type: string
        to:
          type: integer
        total:
          type: integer
    error-500:
      title: error-500
      type: object
      properties:
        status:
          type: string
          enum:
          - System Error
        state_code:
          type: integer
          enum:
          - 500
        deprecated:
          type: boolean
          enum:
          - false
        error:
          type: string
          enum:
          - Error Message
    error-400:
      title: error-400
      type: object
      properties:
        status:
          type: string
          enum:
          - Bad Request
        state_code:
          type: integer
          enum:
          - 400
        deprecated:
          type: boolean
          enum:
          - false
        error:
          type: object

    login:
      title: login
      type: object
      properties:
        status:
          type: string
          enum:
          - Success
        state_code:
          type: integer
          enum:
          - 200
        deprecated:
          type: boolean
          enum:
          - false
        message:
          type: string
        data:
          $ref: '#/components/schemas/token'

    register:
      title: Register
      type: object
      required:
      - name
      - email
      - password
      properties:
        status:
          type: string
          enum:
          - Success
        state_code:
          type: integer
          enum:
          - 200
        deprecated:
          type: boolean
          enum:
          - false
        message:
          type: string
        data:
          $ref: '#/components/schemas/token'
    token:
      title: token
      type: object
      required:
      - name
      - email
      - password
      properties:
        token:
          type: string
        token_type:
          type: string
          enum:
          - Bearer

